name: release
on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

env:
  BINARY_NAME: dotfilers

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          configuration: ".github/changelog_configuration.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: ${{ steps.build_changelog.outputs.changelog }}

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ubuntu-20.04
    env:
      CARGO_TERM_COLOR: always
      BINARY_NAME: dotfilers
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, linux-arm, macos]
        include:
          - build: linux
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: linux-arm
            target: armv7-unknown-linux-gnueabihf
          - build: macos
            target: x86_64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Get release download URL
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: artifacts

      - name: Set release upload URL and release version
        shell: bash
        run: |
          release_upload_url="$(cat artifacts/release-upload-url)"
          echo "RELEASE_UPLOAD_URL=$release_upload_url" >> $GITHUB_ENV
          echo "release upload url: $release_upload_url"

      - name: Build release binary (Linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: |
          docker run --rm \
            --volume "${PWD}/":/root/src \
            --workdir /root/src \
            joseluisq/rust-linux-darwin-builder:1.62.0 \
            sh -c "cargo build --release --target ${{ matrix.target }}"

      - name: Build release binary (arm)
        if: matrix.build == 'linux-arm'
        run: |
          docker build -f ci/Dockerfile.armv7 -t local/armbuild ci/
          docker run --rm \
            --volume "${PWD}":/app \
            local/armbuild

      - name: Build archive
        shell: bash
        run: |
          staging="${{ env.BINARY_NAME }}-${{ github.ref_name }}-${{ matrix.target }}"
          mkdir -p "$staging"/
          cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}" "$staging/${{ env.BINARY_NAME }}"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

  publish:
    name: Publish to crates.io
    needs: ['build-release']
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: publish crates
        uses: katyo/publish-crates@v1
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
